smle_lh_values <- lh(Y = Data$Y, X = Data$X[, fit_smle$ID_retained], family = family, beta = fit_smle$coef_retained)
# Loop through each column of ID_out to calculate the log-likelihood for each sbess model
i <- ncol(fit_sbess$ID_out)
ind <- fit_sbess$ID_out[,i]
sbess_lh_values <- lh(Y = Data$Y, X = Data$X[, ind], family = family,  beta = fit_sbess$Beta_out[,i])
list(abess_lh = abess_lh, sbess_lh_values = sbess_lh_values, smle_lh_values = smle_lh_values)
}
# Parameters
N <- 200
P <- 3000
k <- 15
rho <- 0.8
family <- gaussian()
causal_feature_pos <- c(101, 103, 105, 107, 109, 111)
causal_feature_pos <- c(101, 103, 105, 107, 109, 111)
causal_features_coef <- 2 * c(1, -1.2, 1, -1, 1.2, -1)
# Run 100 simulations
num_simulations <- 100
set.seed(123)  # Set a seed for reproducibility of the simulation seeds
simulation_seeds <- sample.int(1e6, num_simulations)
results <- vector("list", num_simulations)
# Run simulations using a for loop
for (i in 1:num_simulations) {
results[[i]] <- run_simulation(N, P, k, rho, family, causal_feature_pos,
causal_features_coef, simulation_seeds[i])
}
# Process results
abess_lh_values <- sapply(results, function(res) res$abess_lh)
sbess_lh_values <- sapply(results, function(res) res$sbess_lh_values)
smle_lh_values <- sapply(results, function(res) res$smle_lh_values)
data_to_plot <- data.frame(
abess = abess_lh_values,
sbess = sbess_lh_values,
smle = smle_lh_values
)
# Create the boxplot
boxplot(data_to_plot, names = c("abess", "sbess", "smle"),
main = "Log-Likelihood Comparison between abess, sbess, and smle",
xlab = "Method", ylab = "Log-Likelihood")
# Calculate and add mean values as text
means <- apply(data_to_plot, 2, mean)
sds <- apply(data_to_plot, 2, sd)
text(1:ncol(data_to_plot), means, labels = round(means, 2), pos = 3, col = "blue")
text(1:ncol(data_to_plot), means - sds, labels = round(sds, 2), pos = 1, col = "red")
# Optional: Add a legend
legend("topright", legend = c("Mean", "SD"), col = c("blue", "red"), pch = 1)
library(ggplot2)
seed <- 810777
set.seed(seed)
N = 400
P = 3000
k = 15
family = binomial()
causal_feature_pos <- c(101,103,105,107,109,111)
causal_features_coef =2*c(1,-1.2,1,-1,1.2,-1)
Data <- list()
ar1_cor <- function(P, rho) {
exponent <- abs(matrix(1:P - 1, nrow = P, ncol = P, byrow = TRUE) - (1:P - 1))
rho^exponent
}
rho = 0.8
Data$X <- mvnfast::rmvn(n = N, mu = rep(0,P), ar1_cor(P,rho))
Beta <- rep(0,P)
Beta[causal_feature_pos] <- causal_features_coef
Data$Y <- Data$X %*% Beta + rnorm(n = N,mean = 0,sd = 0.5)
Data$Y <- rbinom(n = N, size = 1 ,prob = round(exp(Data$Y )/(1+exp(Data$Y )),3))
fit_sbess <- Sbess(Y = Data$Y, X = Data$X, family = family, k = k , m =6 )
fit_smle <- SMLE(Y = Data$Y, X = Data$X, family = family, k = k)
fit_smle_cold <- SMLE(Y = Data$Y, X = Data$X, family = family, k = k, coef_initial  = rep(0,P))
fit_abess <- abess(x = Data$X, y = Data$Y, family = family$family, support.size = k)
ind <- extract(fit_abess)$support.vars
ind <- as.numeric(regmatches(ind, gregexpr("[[:digit:]]+", ind)))
ind
# Calculate abess log-likelihood
abess_lh <- lh(Y = Data$Y, X = Data$X[,ind], family = family, beta =
fit_abess$beta[ind])
cat("abess Log-likelihood:", abess_lh, "\n")
# Preallocate a vector to store the log-likelihood values for sbess models
sbess_lh_values <- fit_sbess$llh_out
smle_lh_values <- lh(Y = Data$Y, X = Data$X[, fit_smle$ID_retained], family = family, beta = fit_smle$coef_retained)
smle_cold_lh_values <- lh(Y = Data$Y, X = Data$X[, fit_smle_cold$ID_retained], family = family, beta = fit_smle_cold$coef_retained)
# Print the results
cat("sbess Log-likelihood values:\n", sbess_lh_values, "\n")
# Create a data frame for plotting
plot_data <- data.frame(
Index = seq_along(sbess_lh_values),
sbess_lh = sbess_lh_values,
abess_lh = rep(abess_lh, length(sbess_lh_values)),
smle_lh = rep(smle_lh_values, length(sbess_lh_values)),
smle_cold_lh = rep(smle_cold_lh_values, length(sbess_lh_values))
)
# Plot the data using ggplot2
ggplot(plot_data, aes(x = Index)) +
geom_line(aes(y = sbess_lh, color = "sbess_lh")) +
geom_line(aes(y = abess_lh, color = "abess_lh"), linetype = "dashed") +
geom_line(aes(y = smle_lh, color = "smle_lh"), linetype = "dotdash") +
geom_line(aes(y = smle_cold_lh, color = "smle_cold_lh"), linetype = "dotted") +
labs(title = "Log-likelihood Comparison", y = "Log-likelihood", x = "Index") +
scale_color_manual(values = c("sbess_lh" = "blue", "abess_lh" = "red", "smle_lh" = "black", "smle_cold_lh" = "brown"),
name = "Log-likelihood") +
theme_minimal()
print(seed)
fit_smle_cold
smle_cold_lh_values
fit_smle
smle_cold_lh_values
smle_lh_values
fit_sbess
fit_sbess$ID_out
smle_cold_lh_values
fit_smle_cold
fit_sbess <- Sbess(Y = Data$Y, X = Data$X, family = family, k = k , m =6 )
fit_smle <- SMLE(Y = Data$Y, X = Data$X, family = family, k = k)
fit_smle_cold <- SMLE(Y = Data$Y, X = Data$X, family = family, k = k, coef_initial  = rep(0,P),fast=T)
fit_abess <- abess(x = Data$X, y = Data$Y, family = family$family, support.size = k)
ind <- extract(fit_abess)$support.vars
ind <- as.numeric(regmatches(ind, gregexpr("[[:digit:]]+", ind)))
ind
# Calculate abess log-likelihood
abess_lh <- lh(Y = Data$Y, X = Data$X[,ind], family = family, beta =
fit_abess$beta[ind])
cat("abess Log-likelihood:", abess_lh, "\n")
# Preallocate a vector to store the log-likelihood values for sbess models
sbess_lh_values <- fit_sbess$llh_out
smle_lh_values <- lh(Y = Data$Y, X = Data$X[, fit_smle$ID_retained], family = family, beta = fit_smle$coef_retained)
smle_cold_lh_values <- lh(Y = Data$Y, X = Data$X[, fit_smle_cold$ID_retained], family = family, beta = fit_smle_cold$coef_retained)
# Print the results
cat("sbess Log-likelihood values:\n", sbess_lh_values, "\n")
# Create a data frame for plotting
plot_data <- data.frame(
Index = seq_along(sbess_lh_values),
sbess_lh = sbess_lh_values,
abess_lh = rep(abess_lh, length(sbess_lh_values)),
smle_lh = rep(smle_lh_values, length(sbess_lh_values)),
smle_cold_lh = rep(smle_cold_lh_values, length(sbess_lh_values))
)
# Plot the data using ggplot2
ggplot(plot_data, aes(x = Index)) +
geom_line(aes(y = sbess_lh, color = "sbess_lh")) +
geom_line(aes(y = abess_lh, color = "abess_lh"), linetype = "dashed") +
geom_line(aes(y = smle_lh, color = "smle_lh"), linetype = "dotdash") +
geom_line(aes(y = smle_cold_lh, color = "smle_cold_lh"), linetype = "dotted") +
labs(title = "Log-likelihood Comparison", y = "Log-likelihood", x = "Index") +
scale_color_manual(values = c("sbess_lh" = "blue", "abess_lh" = "red", "smle_lh" = "black", "smle_cold_lh" = "brown"),
name = "Log-likelihood") +
theme_minimal()
print(seed)
fit_smle_cold
fit_sbess$ID_out[,1]
?SMLE
smle_lh_values <- lh(Y = Data$Y, X = Data$X[, fit_smle$ID_retained], family = family, beta = coefficients(glm.fit(x = X[, fit_smle$ID_retained], y = Y, family = family)))
smle_refi<- coefficients(glm.fit(x = X[, fit_smle$ID_retained], y = Y, family = family)
smle_lh_values <- lh(Y = Data$Y, X = Data$X[, fit_smle$ID_retained], family = family, beta = ))
smle_refit<- coefficients(glm.fit(x = Data$X[, fit_smle$ID_retained], y = Y, family = family)
smle_lh_values <- lh(Y = Data$Y, X = Data$X[, fit_smle$ID_retained], family = family, beta = ))
fit_smle$ID_retained
smle_refit<- coefficients(glm.fit(x = Data$X[, fit_smle$ID_retained], y = Y, family = family)
smle_lh_values <- lh(Y = Data$Y, X = Data$X[, fit_smle$ID_retained], family = family, beta = ))
smle_refit<- coefficients(glm.fit(x = Data$X[, fit_smle$ID_retained], y = Y, family = family))
family
glm.fit(x = Data$X[, fit_smle$ID_retained], y = Y, family = family)
smle_refit<- coefficients(glm.fit(x = Data$X[, fit_smle$ID_retained], y = Data$Y, family = family))
smle_refit
smle_lh_values <- lh(Y = Data$Y, X = Data$X[, fit_smle$ID_retained], family = family, beta =smle_refit )
smle_cold_lh_values <- lh(Y = Data$Y, X = Data$X[, fit_smle_cold$ID_retained], family = family, beta = fit_smle_cold$coef_retained)
# Print the results
cat("sbess Log-likelihood values:\n", sbess_lh_values, "\n")
# Create a data frame for plotting
plot_data <- data.frame(
Index = seq_along(sbess_lh_values),
sbess_lh = sbess_lh_values,
abess_lh = rep(abess_lh, length(sbess_lh_values)),
smle_lh = rep(smle_lh_values, length(sbess_lh_values)),
smle_cold_lh = rep(smle_cold_lh_values, length(sbess_lh_values))
)
# Plot the data using ggplot2
ggplot(plot_data, aes(x = Index)) +
geom_line(aes(y = sbess_lh, color = "sbess_lh")) +
geom_line(aes(y = abess_lh, color = "abess_lh"), linetype = "dashed") +
geom_line(aes(y = smle_lh, color = "smle_lh"), linetype = "dotdash") +
geom_line(aes(y = smle_cold_lh, color = "smle_cold_lh"), linetype = "dotted") +
labs(title = "Log-likelihood Comparison", y = "Log-likelihood", x = "Index") +
scale_color_manual(values = c("sbess_lh" = "blue", "abess_lh" = "red", "smle_lh" = "black", "smle_cold_lh" = "brown"),
name = "Log-likelihood") +
theme_minimal()
print(seed)
library(ggplot2)
#seed <- 810777
set.seed(1)
N = 400
P = 3000
k = 15
family = binomial()
causal_feature_pos <- c(101,103,105,107,109,111)
causal_features_coef =2*c(1,-1.2,1,-1,1.2,-1)
Data <- list()
ar1_cor <- function(P, rho) {
exponent <- abs(matrix(1:P - 1, nrow = P, ncol = P, byrow = TRUE) - (1:P - 1))
rho^exponent
}
rho = 0.8
Data$X <- mvnfast::rmvn(n = N, mu = rep(0,P), ar1_cor(P,rho))
Beta <- rep(0,P)
Beta[causal_feature_pos] <- causal_features_coef
Data$Y <- Data$X %*% Beta + rnorm(n = N,mean = 0,sd = 0.5)
Data$Y <- rbinom(n = N, size = 1 ,prob = round(exp(Data$Y )/(1+exp(Data$Y )),3))
fit_sbess <- Sbess(Y = Data$Y, X = Data$X, family = family, k = k , m =6 )
fit_smle <- SMLE(Y = Data$Y, X = Data$X, family = family, k = k)
fit_smle_cold <- SMLE(Y = Data$Y, X = Data$X, family = family, k = k, coef_initial  = rep(0,P),fast=T)
fit_abess <- abess(x = Data$X, y = Data$Y, family = family$family, support.size = k)
ind <- extract(fit_abess)$support.vars
ind <- as.numeric(regmatches(ind, gregexpr("[[:digit:]]+", ind)))
ind
# Calculate abess log-likelihood
abess_lh <- lh(Y = Data$Y, X = Data$X[,ind], family = family, beta =
fit_abess$beta[ind])
cat("abess Log-likelihood:", abess_lh, "\n")
# Preallocate a vector to store the log-likelihood values for sbess models
sbess_lh_values <- fit_sbess$llh_out
smle_refit<- coefficients(glm.fit(x = Data$X[, fit_smle$ID_retained], y = Data$Y, family = family))
smle_lh_values <- lh(Y = Data$Y, X = Data$X[, fit_smle$ID_retained], family = family, beta =smle_refit )
smle_cold_lh_values <- lh(Y = Data$Y, X = Data$X[, fit_smle_cold$ID_retained], family = family, beta = fit_smle_cold$coef_retained)
# Print the results
cat("sbess Log-likelihood values:\n", sbess_lh_values, "\n")
# Create a data frame for plotting
plot_data <- data.frame(
Index = seq_along(sbess_lh_values),
sbess_lh = sbess_lh_values,
abess_lh = rep(abess_lh, length(sbess_lh_values)),
smle_lh = rep(smle_lh_values, length(sbess_lh_values)),
smle_cold_lh = rep(smle_cold_lh_values, length(sbess_lh_values))
)
# Plot the data using ggplot2
ggplot(plot_data, aes(x = Index)) +
geom_line(aes(y = sbess_lh, color = "sbess_lh")) +
geom_line(aes(y = abess_lh, color = "abess_lh"), linetype = "dashed") +
geom_line(aes(y = smle_lh, color = "smle_lh"), linetype = "dotdash") +
geom_line(aes(y = smle_cold_lh, color = "smle_cold_lh"), linetype = "dotted") +
labs(title = "Log-likelihood Comparison", y = "Log-likelihood", x = "Index") +
scale_color_manual(values = c("sbess_lh" = "blue", "abess_lh" = "red", "smle_lh" = "black", "smle_cold_lh" = "brown"),
name = "Log-likelihood") +
theme_minimal()
print(seed)
set.seed(2)
N = 400
P = 3000
k = 15
family = binomial()
causal_feature_pos <- c(101,103,105,107,109,111)
causal_features_coef =2*c(1,-1.2,1,-1,1.2,-1)
Data <- list()
ar1_cor <- function(P, rho) {
exponent <- abs(matrix(1:P - 1, nrow = P, ncol = P, byrow = TRUE) - (1:P - 1))
rho^exponent
}
rho = 0.8
Data$X <- mvnfast::rmvn(n = N, mu = rep(0,P), ar1_cor(P,rho))
Beta <- rep(0,P)
Beta[causal_feature_pos] <- causal_features_coef
Data$Y <- Data$X %*% Beta + rnorm(n = N,mean = 0,sd = 0.5)
Data$Y <- rbinom(n = N, size = 1 ,prob = round(exp(Data$Y )/(1+exp(Data$Y )),3))
fit_sbess <- Sbess(Y = Data$Y, X = Data$X, family = family, k = k , m =6 )
fit_smle <- SMLE(Y = Data$Y, X = Data$X, family = family, k = k)
fit_abess <- abess(x = Data$X, y = Data$Y, family = family$family, support.size = k)
ind <- extract(fit_abess)$support.vars
ind <- as.numeric(regmatches(ind, gregexpr("[[:digit:]]+", ind)))
ind
# Calculate abess log-likelihood
abess_lh <- lh(Y = Data$Y, X = Data$X[,ind], family = family, beta =
fit_abess$beta[ind])
cat("abess Log-likelihood:", abess_lh, "\n")
# Preallocate a vector to store the log-likelihood values for sbess models
sbess_lh_values <- fit_sbess$llh_out
smle_refit<- coefficients(glm.fit(x = Data$X[, fit_smle$ID_retained], y = Data$Y, family = family))
smle_lh_values <- lh(Y = Data$Y, X = Data$X[, fit_smle$ID_retained], family = family, beta =smle_refit )
smle_cold_lh_values <- lh(Y = Data$Y, X = Data$X[, fit_smle_cold$ID_retained], family = family, beta = fit_smle_cold$coef_retained)
# Print the results
cat("sbess Log-likelihood values:\n", sbess_lh_values, "\n")
# Create a data frame for plotting
plot_data <- data.frame(
Index = seq_along(sbess_lh_values),
sbess_lh = sbess_lh_values,
abess_lh = rep(abess_lh, length(sbess_lh_values)),
smle_lh = rep(smle_lh_values, length(sbess_lh_values))
)
# Plot the data using ggplot2
ggplot(plot_data, aes(x = Index)) +
geom_line(aes(y = sbess_lh, color = "sbess_lh")) +
geom_line(aes(y = abess_lh, color = "abess_lh"), linetype = "dashed") +
geom_line(aes(y = smle_lh, color = "smle_lh"), linetype = "dotdash") +
labs(title = "Log-likelihood Comparison", y = "Log-likelihood", x = "Index") +
scale_color_manual(values = c("sbess_lh" = "blue", "abess_lh" = "red", "smle_lh" = "black"),
name = "Log-likelihood") +
theme_minimal()
print(seed)
library(ggplot2)
#seed <- 810777
set.seed(10)
N = 400
P = 3000
k = 15
family = binomial()
causal_feature_pos <- c(101,103,105,107,109,111)
causal_features_coef =2*c(1,-1.2,1,-1,1.2,-1)
Data <- list()
ar1_cor <- function(P, rho) {
exponent <- abs(matrix(1:P - 1, nrow = P, ncol = P, byrow = TRUE) - (1:P - 1))
rho^exponent
}
rho = 0.8
Data$X <- mvnfast::rmvn(n = N, mu = rep(0,P), ar1_cor(P,rho))
Beta <- rep(0,P)
Beta[causal_feature_pos] <- causal_features_coef
Data$Y <- Data$X %*% Beta + rnorm(n = N,mean = 0,sd = 0.5)
Data$Y <- rbinom(n = N, size = 1 ,prob = round(exp(Data$Y )/(1+exp(Data$Y )),3))
fit_sbess <- Sbess(Y = Data$Y, X = Data$X, family = family, k = k , m =6 )
fit_smle <- SMLE(Y = Data$Y, X = Data$X, family = family, k = k)
fit_abess <- abess(x = Data$X, y = Data$Y, family = family$family, support.size = k)
ind <- extract(fit_abess)$support.vars
ind <- as.numeric(regmatches(ind, gregexpr("[[:digit:]]+", ind)))
ind
# Calculate abess log-likelihood
abess_lh <- lh(Y = Data$Y, X = Data$X[,ind], family = family, beta =
fit_abess$beta[ind])
cat("abess Log-likelihood:", abess_lh, "\n")
# Preallocate a vector to store the log-likelihood values for sbess models
sbess_lh_values <- fit_sbess$llh_out
smle_refit<- coefficients(glm.fit(x = Data$X[, fit_smle$ID_retained], y = Data$Y, family = family))
smle_lh_values <- lh(Y = Data$Y, X = Data$X[, fit_smle$ID_retained], family = family, beta =smle_refit )
smle_cold_lh_values <- lh(Y = Data$Y, X = Data$X[, fit_smle_cold$ID_retained], family = family, beta = fit_smle_cold$coef_retained)
# Print the results
cat("sbess Log-likelihood values:\n", sbess_lh_values, "\n")
# Create a data frame for plotting
plot_data <- data.frame(
Index = seq_along(sbess_lh_values),
sbess_lh = sbess_lh_values,
abess_lh = rep(abess_lh, length(sbess_lh_values)),
smle_lh = rep(smle_lh_values, length(sbess_lh_values))
)
# Plot the data using ggplot2
ggplot(plot_data, aes(x = Index)) +
geom_line(aes(y = sbess_lh, color = "sbess_lh")) +
geom_line(aes(y = abess_lh, color = "abess_lh"), linetype = "dashed") +
geom_line(aes(y = smle_lh, color = "smle_lh"), linetype = "dotdash") +
labs(title = "Log-likelihood Comparison", y = "Log-likelihood", x = "Index") +
scale_color_manual(values = c("sbess_lh" = "blue", "abess_lh" = "red", "smle_lh" = "black"),
name = "Log-likelihood") +
theme_minimal()
print(seed)
set.seed(10)
N = 400
P = 3000
k = 15
family = binomial()
causal_feature_pos <- c(101,103,105,107,109,111)
causal_features_coef =2*c(1,-1.2,1,-1,1.2,-1)
Data <- list()
ar1_cor <- function(P, rho) {
exponent <- abs(matrix(1:P - 1, nrow = P, ncol = P, byrow = TRUE) - (1:P - 1))
rho^exponent
}
rho = 0.8
Data$X <- mvnfast::rmvn(n = N, mu = rep(0,P), ar1_cor(P,rho))
Beta <- rep(0,P)
Beta[causal_feature_pos] <- causal_features_coef
Data$Y <- Data$X %*% Beta + rnorm(n = N,mean = 0,sd = 0.5)
Data$Y <- rbinom(n = N, size = 1 ,prob = round(exp(Data$Y )/(1+exp(Data$Y )),3))
fit_sbess <- Sbess(Y = Data$Y, X = Data$X, family = family, k = k , m =6 )
fit_smle <- SMLE(Y = Data$Y, X = Data$X, family = family, k = k)
fit_abess <- abess(x = Data$X, y = Data$Y, family = family$family, support.size = k)
ind <- extract(fit_abess)$support.vars
ind <- as.numeric(regmatches(ind, gregexpr("[[:digit:]]+", ind)))
ind
# Calculate abess log-likelihood
abess_lh <- lh(Y = Data$Y, X = Data$X[,ind], family = family, beta =
fit_abess$beta[ind])
cat("abess Log-likelihood:", abess_lh, "\n")
# Preallocate a vector to store the log-likelihood values for sbess models
sbess_lh_values <- fit_sbess$llh_out
smle_refit<- coefficients(glm.fit(x = Data$X[, fit_smle$ID_retained], y = Data$Y, family = family))
smle_lh_values <- lh(Y = Data$Y, X = Data$X[, fit_smle$ID_retained], family = family, beta =smle_refit )
smle_cold_lh_values <- lh(Y = Data$Y, X = Data$X[, fit_smle_cold$ID_retained], family = family, beta = fit_smle_cold$coef_retained)
# Print the results
cat("sbess Log-likelihood values:\n", sbess_lh_values, "\n")
# Create a data frame for plotting
plot_data <- data.frame(
Index = seq_along(sbess_lh_values),
sbess_lh = sbess_lh_values,
abess_lh = rep(abess_lh, length(sbess_lh_values)),
smle_lh = rep(smle_lh_values, length(sbess_lh_values))
)
# Plot the data using ggplot2
ggplot(plot_data, aes(x = Index)) +
geom_line(aes(y = sbess_lh, color = "sbess_lh")) +
geom_line(aes(y = abess_lh, color = "abess_lh"), linetype = "dashed") +
geom_line(aes(y = smle_lh, color = "smle_lh"), linetype = "dotdash") +
labs(title = "Log-likelihood Comparison", y = "Log-likelihood", x = "Index") +
scale_color_manual(values = c("sbess_lh" = "blue", "abess_lh" = "red", "smle_lh" = "black"),
name = "Log-likelihood") +
theme_minimal()
print(seed)
source("C:/Users/Gamer PC/Desktop/Streaming/algorithm.R")
source("C:\Users\Gamer PC\Desktop\Streaming\algorithm.R")
source("C:\\Users\\Gamer PC\\Desktop\\Streaming\\algorithm.R")
setwd("C:\\Users\\Gamer PC\\Desktop\\Streaming\\")
source（"algorithm.R"）
source("C:/Users/Gamer PC/Desktop/Streaming/Streaming_methods.R")
library(stringr)
Methods = list("BANS","alpha_investing","Iter_SIS","OFS_fisher","Saola_z","OSFS_FI")
Metrics = list("time" , "psr" , "trainloss", "testloss", "bic", "model_size")
shuffle = TRUE
set.seed(1)
num_methods = length(Methods)
correlation = "AR"
num_Simu = 100
k = 28
for( i in Metrics){assign(paste0("Table_r_",i),matrix(0, nrow = num_methods, ncol = num_Simu) )}
for( m in 1:num_Simu){
N = 800
train_size = 600
P = 1500
p = 300
data<-list()
for( i in 1:(P/p)){
data[[i]]<- Gen_Data(n = N, p = p, pos_truecoef = sample(1:300,5,F), family = "gaussian"
,effect_truecoef = c(4,-5,3,-5,4),correlation = correlation)
}
Data<-list(Y = rep(0,N),X= NULL,coef_true= NULL,subset_true= NULL)
for(i in 1:(P/p)){
Data$Y <- Data$Y + data[[i]]$Y
Data$X <- cbind(Data$X,data[[i]]$X)
Data$coef_true<- c(Data$coef_true,data[[i]]$coef_true)
Data$subset_true <- c(Data$subset_true,data[[i]]$subset_true+p*(i-1))
}
pi <- exp(Data$Y) / (1 + exp(Data$Y))
Data$Y  <- rbinom(N, size = 1, prob = pi)
raw_data <- new("Streaming_Data" , X =Data$X, y =Data$Y , causal_index = Data$subset_true)
processed_data <- setData_(raw_data,train_index = 1:train_size)
a1 <- new("Algorithm",Methods = Methods , Processed_Data = processed_data)
s = 25
Test_Result <- run(a1, shuffle= shuffle , s , k ,family = binomial())
X <- Test_Result@Processed_Data@X
y <- Test_Result@Processed_Data@y
n <- dim(X)[1]
p <- dim(X)[2]
num_methods <- length(Test_Result@Result)
num_iters <- length(Test_Result@Result[[1]])/2
cumulative_time <- matrix(0,nrow = num_methods, ncol =num_iters)
online_PSR <- matrix(0,nrow = num_methods, ncol =num_iters)
Train_loss <- matrix(0,nrow = num_methods, ncol =num_iters)
Test_Loss <- matrix(0,nrow = num_methods, ncol =num_iters)
subset_index_change <- matrix(0,nrow = num_methods, ncol =num_iters)
bic_value <- matrix(0,nrow = num_methods, ncol =num_iters)
model_size <- matrix(0,nrow = num_methods, ncol =num_iters)
online_FDR <- matrix(0,nrow = num_methods, ncol =num_iters)
for( i in 1:num_methods){
Iters <- Test_Result@Result[[i]][(1:num_iters)*2-1]
Index_set <-Test_Result@Result[[i]][(1:1:num_iters)*2]
train_index <- Test_Result@Processed_Data@train_index
test_index <- (1:n)[! (1:n) %in% train_index]
for(j in 1:num_iters){
cumulative_time[i,j] <- sum(unlist(Iters[1:j]))
model_size[i,j] <- length(Index_set[[j]])
online_PSR[i,j] <- sum(Data$subset_true %in%  Test_Result@shuffle_order[Index_set[[j]]])/length(Data$subset_true)
model <- glm(Y~., data = data.frame(X = X[train_index,Test_Result@shuffle_order[Index_set[[j]]]], Y = y[train_index]),family = binomial())
Train_loss[i,j] <-  -logLik(model)/train_size
newdata <- data.frame( X = X[test_index,Test_Result@shuffle_order[Index_set[[j]]]], Y = y[test_index])
y_test <- y[test_index]
Test_Loss[i,j] <-  -sum(y_test*log(predict(model,newdata,type = "response"))+(1-y_test)*log(1-predict(model,newdata,type = "response")))/(N-train_size)
bic_value[i,j] <- BIC(model)
}
}
Table_r_time[,m] =  cumulative_time[,num_iters]
Table_r_psr[,m] = online_PSR[,num_iters]
Table_r_trainloss[,m] = Train_loss[,num_iters]
Table_r_testloss[,m] = Test_Loss[,num_iters]
Table_r_bic[,m] = bic_value[,num_iters]
Table_r_model_size[,m] = model_size[,num_iters]
}
source("C:/Users/Gamer PC/Desktop/Streaming/Table6_AR_Binomial_rand.R", echo=TRUE)
library("glmnet")                 # version 4.1.7
library("SIS")                    # version 0.8.8
library("qqman")                  # version 0.1.9
library("SMLE")                   # version 2.1.1
library("abess")                  # version 0.4.7
library("VariableScreening")      # version 0.2.1
install.packages("VariableScreening")
version("glmnet")
packageVersion("glmnet")
packageVersion("SIS")
packageVersion("qqman")
packageVersion("SMLE")
packageVersion("abess")
set.seed(1)
Data_ctg <- Gen_Data(n = 200, p = 1000, family = "gaussian", pos_ctgidx = c(1, 2, 3),
level_ctgidx = c(3, 4, 5))
head(Data_ctg$X)[, 1:5]
fit <- SMLE(Y = Data_ctg$Y, X = Data_ctg$X, k = 15, family = "gaussian", keyset = c(1, 4, 5),
categorical = TRUE, group = TRUE)
fit
fit_s <- smle_select(fit, criterion = "ebic", gamma_seq = seq(0,1,0.2), vote = TRUE)
fit_s
set.seed(1)
Data_eg<-Gen_Data(n = 400, p = 1000, family = "binomial",  correlation="AR", rho = 0.9,
pos_truecoef = c(1,3,5,7,9),effect_truecoef = c(2,3,-3,3,-4))
print(Data_eg)
fit1<-SMLE(Y = Data_eg$Y, X = Data_eg$X,family = "binomial", k = 10, coef_initial = rep(0,1000))
summary(fit1)
coef(summary(glm(Data_eg$Y ~ Data_eg$X[ , 2], family = "binomial")))
fit1_s <- smle_select(fit1, criterion = "ebic")
fit1_s
summary(fit1_s)
